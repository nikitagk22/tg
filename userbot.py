#!/usr/bin/env python3
"""
UserBot –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É
"""

import asyncio
import json
import logging
from datetime import datetime, timezone
from typing import Dict, List, Set

from telethon import TelegramClient, events
from telethon.tl.types import Channel, Message, MessageMediaPhoto, MessageMediaDocument
from telethon.errors import FloodWaitError, ChatAdminRequiredError, ChannelPrivateError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] [%(levelname)s] %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

class ChannelMonitor:
    def __init__(self, api_id: int, api_hash: str, phone: str, bot_token: str):
        self.api_id = api_id
        self.api_hash = api_hash
        self.phone = phone
        self.bot_token = bot_token
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.userbot = TelegramClient('userbot_session', api_id, api_hash)
        self.bot = TelegramClient('bot_session', api_id, api_hash).start(bot_token=bot_token)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.settings = self.load_settings()
        self.source_channels: Set[int] = set(self.settings.get("source_channels", []))
        self.bot_chat_id = self.settings.get("bot_chat_id")
        
        # –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.processed_messages: Set[str] = set()
        
        # –ë—É—Ñ–µ—Ä –¥–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø
        self.media_buffer: Dict[str, List[Message]] = {}
        
        logger.info(f"UserBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(self.source_channels)} –∫–∞–Ω–∞–ª–æ–≤")
    
    def load_settings(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open('userbot_settings.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_settings = {
                "source_channels": [],
                "bot_chat_id": None,
                "auto_forward": True,
                "include_media": True,
                "forward_delay": 0
            }
            self.save_settings(default_settings)
            return default_settings
    
    def save_settings(self, settings: Dict = None) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª"""
        if settings is None:
            settings = self.settings
        with open('userbot_settings.json', 'w', encoding='utf-8') as f:
            json.dump(settings, f, indent=2, ensure_ascii=False)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç UserBot"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º UserBot
            await self.userbot.start(phone=self.phone)
            logger.info("UserBot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            self.register_handlers()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            await self.monitor_channels()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ UserBot: {e}")
            raise
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        
        @self.userbot.on(events.NewMessage(chats=self.source_channels))
        async def handle_new_message(event: events.NewMessage.Event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
            try:
                message: Message = event.message
                chat_id = event.chat_id
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_key = f"{chat_id}:{message.id}"
                if message_key in self.processed_messages:
                    return
                
                logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}:{message.id}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
                if message.media_group_id:
                    await self.handle_media_group(message)
                else:
                    # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self.forward_message(message, chat_id)
                
                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                self.processed_messages.add(message_key)
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000)
                if len(self.processed_messages) > 1000:
                    self.processed_messages.clear()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        @self.userbot.on(events.MessageEdited(chats=self.source_channels))
        async def handle_edited_message(event: events.MessageEdited.Event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
            try:
                message: Message = event.message
                chat_id = event.chat_id
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_key = f"{chat_id}:{message.id}"
                if message_key in self.processed_messages:
                    return
                
                logger.info(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}:{message.id}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if message.media_group_id:
                    await self.handle_media_group(message)
                else:
                    await self.forward_message(message, chat_id)
                
                self.processed_messages.add(message_key)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def handle_media_group(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã"""
        media_group_id = message.media_group_id
        chat_id = message.chat_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
        if media_group_id not in self.media_buffer:
            self.media_buffer[media_group_id] = []
        
        self.media_buffer[media_group_id].append(message)
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ —á–∞—Å—Ç–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
        await asyncio.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–±—Ä–∞–ª–∏—Å—å –ª–∏ –≤—Å–µ —á–∞—Å—Ç–∏
        if len(self.media_buffer[media_group_id]) >= 1:  # –ú–∏–Ω–∏–º—É–º 1 —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.forward_media_group(media_group_id, chat_id)
            
            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
            del self.media_buffer[media_group_id]
    
    async def forward_media_group(self, media_group_id: str, chat_id: int):
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –±–æ—Ç—É"""
        try:
            messages = self.media_buffer.get(media_group_id, [])
            if not messages:
                return
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            messages.sort(key=lambda m: m.id)
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã
            for message in messages:
                await self.forward_message(message, chat_id)
                await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ—Å—ã–ª–∫–∞–º–∏
            
            logger.info(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ {media_group_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
    
    async def forward_message(self, message: Message, source_chat_id: int):
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É"""
        try:
            if not self.bot_chat_id:
                logger.warning("bot_chat_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
            forward_text = f"üì¢ –ù–æ–≤–æ—Å—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞ {source_chat_id}\n"
            forward_text += f"üïê {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')} UTC\n"
            forward_text += f"üìù ID: {source_chat_id}:{message.id}"
            
            if message.media_group_id:
                forward_text += f"\nüñº –ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞: {message.media_group_id}"
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É
            await self.userbot.forward_messages(
                entity=self.bot_chat_id,
                messages=message
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await self.userbot.send_message(
                entity=self.bot_chat_id,
                message=forward_text
            )
            
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –±–æ—Ç—É")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def monitor_channels(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("–ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤")
        
        try:
            while True:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(30)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤
                await self.check_channels_access()
                
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        finally:
            await self.stop()
    
    async def check_channels_access(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        for chat_id in list(self.source_channels):
            try:
                chat = await self.userbot.get_entity(chat_id)
                if not chat:
                    logger.warning(f"–ö–∞–Ω–∞–ª {chat_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞")
                    self.source_channels.remove(chat_id)
                    self.settings["source_channels"] = list(self.source_channels)
                    self.save_settings()
                    
            except (ValueError, ChannelPrivateError, ChatAdminRequiredError):
                logger.warning(f"–ö–∞–Ω–∞–ª {chat_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞")
                self.source_channels.remove(chat_id)
                self.settings["source_channels"] = list(self.source_channels)
                self.save_settings()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ {chat_id}: {e}")
    
    async def add_source_channel(self, chat_id: int) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
            chat = await self.userbot.get_entity(chat_id)
            if not chat:
                return False
            
            if chat_id not in self.source_channels:
                self.source_channels.add(chat_id)
                self.settings["source_channels"] = list(self.source_channels)
                self.save_settings()
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {chat_id}")
                return True
            else:
                logger.info(f"–ö–∞–Ω–∞–ª {chat_id} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {chat_id}: {e}")
            return False
    
    async def remove_source_channel(self, chat_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            if chat_id in self.source_channels:
                self.source_channels.remove(chat_id)
                self.settings["source_channels"] = list(self.source_channels)
                self.save_settings()
                logger.info(f"–£–¥–∞–ª–µ–Ω –∫–∞–Ω–∞–ª –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {chat_id}")
                return True
            else:
                logger.info(f"–ö–∞–Ω–∞–ª {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {chat_id}: {e}")
            return False
    
    async def set_bot_chat_id(self, chat_id: int) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ID —á–∞—Ç–∞ –±–æ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
        try:
            self.bot_chat_id = chat_id
            self.settings["bot_chat_id"] = chat_id
            self.save_settings()
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID —á–∞—Ç–∞ –±–æ—Ç–∞: {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ID —á–∞—Ç–∞ –±–æ—Ç–∞: {e}")
            return False
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç UserBot"""
        try:
            await self.userbot.disconnect()
            await self.bot.disconnect()
            logger.info("UserBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ UserBot: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        from userbot_config import API_ID, API_HASH, PHONE, BOT_TOKEN
    except ImportError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        logger.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª userbot_config.py –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")
        return
    except FileNotFoundError:
        logger.error("–§–∞–π–ª userbot_config.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        logger.info("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª userbot_config.py —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:")
        logger.info("API_ID = –≤–∞—à_api_id")
        logger.info("API_HASH = '–≤–∞—à_api_hash'")
        logger.info("PHONE = '–≤–∞—à_–Ω–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞'")
        logger.info("BOT_TOKEN = '—Ç–æ–∫–µ–Ω_–≤–∞—à–µ–≥–æ_–±–æ—Ç–∞'")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º UserBot
        monitor = ChannelMonitor(API_ID, API_HASH, PHONE, BOT_TOKEN)
        await monitor.start()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ userbot_config.py")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
