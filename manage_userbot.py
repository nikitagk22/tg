#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è UserBot –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤
–ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å/—É–¥–∞–ª—è—Ç—å –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
"""

import asyncio
import json
import sys
from typing import Dict, List

from telethon import TelegramClient
from telethon.errors import FloodWaitError, ChatAdminRequiredError, ChannelPrivateError

class UserBotManager:
    def __init__(self, api_id: int, api_hash: str, phone: str):
        self.api_id = api_id
        self.api_hash = api_hash
        self.phone = phone
        self.client = TelegramClient('userbot_session', api_id, api_hash)
        self.settings_file = 'userbot_settings.json'
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç"""
        await self.client.start(phone=self.phone)
        print("‚úÖ UserBot –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç"""
        await self.client.disconnect()
        print("‚úÖ UserBot –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def load_settings(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            with open(self.settings_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            return {"source_channels": [], "bot_chat_id": None}
    
    def save_settings(self, settings: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        with open(self.settings_file, 'w', encoding='utf-8') as f:
            json.dump(settings, f, indent=2, ensure_ascii=False)
    
    async def resolve_channel(self, channel_input: str) -> int:
        """–†–∞–∑—Ä–µ—à–∞–µ—Ç –∫–∞–Ω–∞–ª –ø–æ username –∏–ª–∏ ID"""
        try:
            if channel_input.startswith('@'):
                # Username
                entity = await self.client.get_entity(channel_input)
            elif channel_input.startswith('-100'):
                # Channel ID
                entity = await self.client.get_entity(int(channel_input))
            else:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ ID
                entity = await self.client.get_entity(int(channel_input))
            
            return entity.id
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ '{channel_input}': {e}")
            return None
    
    async def add_channel(self, channel_input: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        channel_id = await self.resolve_channel(channel_input)
        if not channel_id:
            return False
        
        settings = self.load_settings()
        if channel_id not in settings["source_channels"]:
            settings["source_channels"].append(channel_id)
            self.save_settings(settings)
            print(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
            return True
        else:
            print(f"‚ÑπÔ∏è –ö–∞–Ω–∞–ª {channel_id} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            return True
    
    async def remove_channel(self, channel_input: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        channel_id = await self.resolve_channel(channel_input)
        if not channel_id:
            return False
        
        settings = self.load_settings()
        if channel_id in settings["source_channels"]:
            settings["source_channels"].remove(channel_id)
            self.save_settings(settings)
            print(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            return True
        else:
            print(f"‚ÑπÔ∏è –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            return False
    
    async def list_channels(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        settings = self.load_settings()
        channels = settings["source_channels"]
        
        if not channels:
            print("üìã –°–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç")
            return
        
        print(f"üìã –ú–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã ({len(channels)}):")
        for i, channel_id in enumerate(channels, 1):
            try:
                entity = await self.client.get_entity(channel_id)
                title = getattr(entity, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                username = getattr(entity, 'username', None)
                username_str = f" (@{username})" if username else ""
                print(f"  {i}. {title} (ID: {channel_id}){username_str}")
            except Exception as e:
                print(f"  {i}. ID: {channel_id} (–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: {e})")
    
    async def set_bot_chat(self, chat_input: str) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —á–∞—Ç –±–æ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
        try:
            if chat_input.startswith('@'):
                # Username –±–æ—Ç–∞
                entity = await self.client.get_entity(chat_input)
            else:
                # ID —á–∞—Ç–∞
                entity = await self.client.get_entity(int(chat_input))
            
            settings = self.load_settings()
            settings["bot_chat_id"] = entity.id
            self.save_settings(settings)
            print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Ç –±–æ—Ç–∞: {entity.id}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Ç–∞ –±–æ—Ç–∞: {e}")
            return False
    
    async def test_channel_access(self, channel_input: str):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É"""
        channel_id = await self.resolve_channel(channel_input)
        if not channel_id:
            return
        
        try:
            entity = await self.client.get_entity(channel_id)
            title = getattr(entity, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            username = getattr(entity, 'username', None)
            participants_count = getattr(entity, 'participants_count', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            print(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É '{title}' –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
            print(f"   ID: {channel_id}")
            if username:
                print(f"   Username: @{username}")
            print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}")
            
        except ChannelPrivateError:
            print(f"‚ùå –ö–∞–Ω–∞–ª {channel_input} –ø—Ä–∏–≤–∞—Ç–Ω—ã–π, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        except ChatAdminRequiredError:
            print(f"‚ùå –ö–∞–Ω–∞–ª {channel_input} —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {e}")
    
    async def show_status(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å UserBot"""
        settings = self.load_settings()
        
        print("üìä –°—Ç–∞—Ç—É—Å UserBot:")
        print(f"   –ú–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(settings['source_channels'])}")
        print(f"   –ß–∞—Ç –±–æ—Ç–∞: {settings.get('bot_chat_id', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
        
        if settings["source_channels"]:
            print("\nüìã –ö–∞–Ω–∞–ª—ã:")
            await self.list_channels()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        with open('userbot_config.py', 'r', encoding='utf-8') as f:
            config_content = f.read()
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            exec(config_content)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª userbot_config.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ API_ID, API_HASH, PHONE")
        return
    
    if len(sys.argv) < 2:
        print("üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python manage_userbot.py add <–∫–∞–Ω–∞–ª>     - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
        print("  python manage_userbot.py remove <–∫–∞–Ω–∞–ª>  - —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")
        print("  python manage_userbot.py list            - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")
        print("  python manage_userbot.py set-bot <—á–∞—Ç>   - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Ç –±–æ—Ç–∞")
        print("  python manage_userbot.py test <–∫–∞–Ω–∞–ª>    - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø")
        print("  python manage_userbot.py status          - —Å—Ç–∞—Ç—É—Å")
        print("\n–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python manage_userbot.py add @channel_name")
        print("  python manage_userbot.py add -1001234567890")
        print("  python manage_userbot.py set-bot @your_bot")
        return
    
    command = sys.argv[1].lower()
    
    try:
        manager = UserBotManager(API_ID, API_HASH, PHONE)
        await manager.start()
        
        if command == "add" and len(sys.argv) > 2:
            channel = sys.argv[2]
            await manager.add_channel(channel)
            
        elif command == "remove" and len(sys.argv) > 2:
            channel = sys.argv[2]
            await manager.remove_channel(channel)
            
        elif command == "list":
            await manager.list_channels()
            
        elif command == "set-bot" and len(sys.argv) > 2:
            chat = sys.argv[2]
            await manager.set_bot_chat(chat)
            
        elif command == "test" and len(sys.argv) > 2:
            channel = sys.argv[2]
            await manager.test_channel_access(channel)
            
        elif command == "status":
            await manager.show_status()
            
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'python manage_userbot.py' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
        
        await manager.stop()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())
